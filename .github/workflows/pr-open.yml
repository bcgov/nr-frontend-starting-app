name: Commits and PR Open

on:
  pull_request:
  push:
    branches:
      - '*'
      - '*/*'
      - '**'
    tags-ignore:
      - '**'

env:
  REGISTRY: ghcr.io
  NAME: nrfesampleapp

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Not sure what to do with this job :(
  check-frontend:
    name: Check Frontend
    outputs:
      build: ${{ steps.check.outputs.build }}
    env:
      TRIGGERS: ('/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check and process modified files
        id: check
        run: |
          # Fetch main to diff against
          git fetch origin main:refs/remotes/origin/master

          # Trigger build if diff matches any triggers
          TRIGGERS=${{ env.TRIGGERS }}
          while read -r check
          do
              for t in "${TRIGGERS[@]}"; do
                  if [[ "${check}" =~ "${t}" ]]
                  then
                      # Output build=true for next steps
                      echo "::set-output name=build::true"
                      echo -e "${t}\n --> ${check}\n"
                      exit 0
                  fi
              done
          done < <(git diff origin/main --name-only)
          echo "Container build not required"

      - name: Recycle/retag PROD Image
        if: steps.check.outputs.build != 'true'
        uses: shrink/actions-docker-registry-tag@v2
        with:
          registry: ${{ env.REGISTRY }}
          repository: ${{ github.repository }}
          target: prod-frontend
          tags: |
            ${{ github.event.number }}-frontend

  install-dependencies:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn --prefer-offline

  validate-lint:
    name: Validate codestyle
    runs-on: ubuntu-latest
    needs:
      - install-dependencies
    steps:
      - uses: actions/checkout@v3

      - name: Set Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: yarn --prefer-offline

      - name: Run lint
        uses: wearerequired/lint-action@v2
        with:
          eslint: true

  tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs:
      - install-dependencies
      - validate-lint
      - check-frontend
    if: needs.check-frontend.outputs.build == 'true'
    steps:
        uses: actions/checkout@v3

      - name: Set Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn --prefer-offline

      # Not sure if this should be maintaned
      - name: Cache for test results
        id: cache-tests
        uses: actions/cache@v3
        with:
          path: /coverage
          key: coverage-${{ github.run_number }}
          restore-keys: |
            coverage-

      - name: Build
        run: |
          yarn build

      - name: Tests
        run: |
          yarn test

      - name: Report code coverage
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          title: Coverage report
          delete-old-comments: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info

      # TODO: What about E2E tests ???

  security:
    name: Security checks (Commits and PR)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    needs:
      - validate
    steps:
      - uses: actions/checkout@v3
      - name: Set Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn --prefer-offline

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          debug: true
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      # TODO: Add SNYK Token
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk.sarif

  build-image:
    name: Image Build
    env:
      COMPONENT: nrfesampleapp-image
      ZONE: ${{ github.event.number }}
      NRFESAMPLEAPP_VERSION: snapshot-${{ github.event.number }}
    runs-on: ubuntu-latest
    needs:
      - check-frontend
      - install-dependencies
      - validate-lint
      - tests
      - security
    if: needs.check-frontend.outputs.build == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn --prefer-offline

      - name: Build
        run: |
          yarn build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ env.ZONE }}-${{ env.COMPONENT }}

  # Needs SolarCloud permission
  sonarcloud:
    name: Static Analysis
    needs:
      - build-image
      - tests
      - security
    if: always() && (needs.build-image.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        # Disable shallow clone for SonarCloud analysis
        with:
          fetch-depth: 0

      # Not sure if this should be maintaned
      - name: Cache for test results
        id: cache-tests
        uses: actions/cache@v3
        with:
          path: /coverage
          key: coverage-${{ github.run_number }}
          restore-keys: |
            coverage-

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.exclusions=**/test/**,.github/**/*
            -Dsonar.organization=bcgov-sonarcloud
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.cobertura.reportPaths=coverage/cobertura-coverage.xml
            -Dsonar.project.monorepo.enabled=true
            -Dsonar.projectKey=greenfield-template
            -Dsonar.sources=frontend
            -Dsonar.tests=test

  deploy-dev:
    name: DEV Deployment
    needs:
      - build-image
      - tests
      - security
    if: always() && (needs.build-image.result == 'success')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      ZONE: ${{ github.event.number }}
      NRFESAMPLEAPP_VERSION: snapshot-${{ github.event.number }}
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.OC_NAMESPACE }}

          # Clean previous image, if rebuilding
          if [ ${{ needs.build-image.outputs.build == 'true' }} ]
          then
            # Clear stale images for import/replacement
            oc delete is ${{ env.NAME }}-${{ env.ZONE }}-nrfesampleapp || \
              echo "No previously imported images have been found"
          fi

          # Process and apply template
          oc process -f .github/openshift/deploy.frontend.yml -p ZONE=${{ env.ZONE }} \
            -p NRFESAMPLEAPP_VERSION=${{ env.NRFESAMPLEAPP_VERSION }} \
            -p PROMOTE=${{ github.repository }}:${{ env.ZONE }}-nrfesampleapp | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-nrfesampleapp -w

      - name: DEV Deployment update
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          allow-repeats: false
          message: |
            DEV deployments have completed successfully!
            Frontend: [https://${{ env.NAME }}-${{ github.event.number }}-nrfesampleapp.apps.silver.devops.gov.bc.ca/]()
